export const STORED_OBJECTS = `
DELIMITER $$

DROP PROCEDURE IF EXISTS DAILY_RECUR $$
CREATE PROCEDURE DAILY_RECUR ()
BEGIN
    DECLARE FID CHAR(5);
    DECLARE DEPDATE DATE;
    DECLARE DONE INT;
    DECLARE CUR1 CURSOR FOR
        SELECT FLIGHT_ID
        FROM FLIGHT_DAY
        WHERE DAY_OF_WEEK = DAYOFWEEK(UTC_DATE());
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE = 1;
    SET DONE = 0;
    SET DEPDATE = DATE_ADD(UTC_DATE(), INTERVAL 56 DAY);
    OPEN CUR1;
    ITR: LOOP
        FETCH CUR1 INTO FID;
        IF DONE = 1 THEN
            LEAVE ITR;
        END IF;
        INSERT INTO FLIGHT_DATE (FLIGHT_ID, DEPARTURE_DATE, DELAYED_BY, FLIGHT_STATUS)
        VALUES (FID, DEPDATE, '00:00:00', 'AVAILABLE');
    END LOOP ITR;
    CLOSE CUR1;

    DELETE FROM FLIGHT_PATH
    WHERE LEASE_EXPIRY < UTC_DATE();

    DELETE FROM FLIGHT_DATE
    WHERE DEPARTURE_DATE < UTC_DATE();
END $$

DROP FUNCTION IF EXISTS CHANGE_LEASE_DATE_FLIGHT_PATH $$
CREATE FUNCTION CHANGE_LEASE_DATE_FLIGHT_PATH (
    FID CHAR(5),
    NEW_LEASE_EXPIRY DATE
)
RETURNS BOOLEAN DETERMINISTIC
BEGIN
    DECLARE DONE INT;
    DECLARE DEP_DATE DATE;
    DECLARE IS_SUCCESS BOOLEAN;

    IF NOT EXISTS (
        SELECT *
        FROM TICKET, FLIGHT_DATE
        WHERE TICKET.FLIGHT_DATE_ID = FLIGHT_DATE.FLIGHT_DATE_ID
        AND FLIGHT_DATE.FLIGHT_ID = FID
        AND FLIGHT_DATE.DEPARTURE_DATE >= NEW_LEASE_EXPIRY
    ) THEN
        UPDATE FLIGHT_PATH
        SET LEASE_EXPIRY = NEW_LEASE_EXPIRY
        WHERE FLIGHT_ID = FID;

        DELETE FROM FLIGHT_DATE
        WHERE DEPARTURE_DATE >= NEW_LEASE_EXPIRY
        AND FLIGHT_ID = FID;

        SET IS_SUCCESS = TRUE;
    ELSE
        SET IS_SUCCESS = FALSE;
    END IF;
    
    RETURN IS_SUCCESS;
END $$

DROP FUNCTION IF EXISTS CALCULATE_TICKET_PRICE $$
CREATE FUNCTION CALCULATE_TICKET_PRICE (
    CID VARCHAR(20),
    FID CHAR(5),
    DEP_DATE DATE,
    IS_WINDOW BOOLEAN
)
RETURNS INT DETERMINISTIC
BEGIN
    DECLARE PRFSN ENUM ('STUDENT', 'ARMYPERSONNEL', 'SENIORCITIZEN', 'OTHER');
    DECLARE TICKET_COST INT;
    DECLARE DATE_DIFF INT;
    DECLARE PERMISSION CHAR;

    SELECT PROFESSION, ROLE
    INTO PRFSN, PERMISSION
    FROM CUSTOMERS
    WHERE CUSTOMER_ID = CID;

    SELECT BASE_FARE
    INTO TICKET_COST
    FROM FLIGHT_PATH
    WHERE FLIGHT_ID = FID;

    IF PERMISSION != 'N' THEN
        SET TICKET_COST = NULL;
    END IF;

    IF PRFSN = 'STUDENT' THEN
        SET TICKET_COST = 0.9 * TICKET_COST;
    ELSEIF PRFSN = 'ARMYPERSONNEL' THEN
        SET TICKET_COST = 0.75 * TICKET_COST;
    ELSEIF PRFSN = 'SENIORCITIZEN' THEN
        SET TICKET_COST = 0.95 * TICKET_COST;
    ELSEIF PRFSN IS NULL THEN
        SET TICKET_COST = NULL;
    END IF;

    SET DATE_DIFF = DATEDIFF(DEP_DATE, UTC_DATE());
    IF DATE_DIFF < 0 THEN
        SET TICKET_COST = NULL;
    ELSEIF DATE_DIFF < 7 THEN
        SET TICKET_COST = TICKET_COST + TICKET_COST/10*(7-DATE_DIFF) + 2500;
    ELSEIF DATE_DIFF < 28 THEN
        SET TICKET_COST = TICKET_COST + 2500;
    ELSEIF DATE_DIFF > 56 THEN
        SET TICKET_COST = NULL;
    END IF;

    IF IS_WINDOW = TRUE THEN
        SET TICKET_COST = TICKET_COST + 150;
    ELSEIF IS_WINDOW IS NULL THEN
        SET TICKET_COST = NULL;
    END IF;

    RETURN TICKET_COST;
END $$

DROP PROCEDURE IF EXISTS SHOW_FLIGHTS $$
CREATE PROCEDURE SHOW_FLIGHTS (
    IN CID VARCHAR(20),
    IN SOURCE_CITY VARCHAR(20),
    IN SOURCE_COUNTRY VARCHAR(20),
    IN DEST_CITY VARCHAR(20),
    IN DEST_COUNTRY VARCHAR(20),
    IN FROM_DATE DATE
)
BEGIN
    DECLARE SOURCE_AIRPORT_ID INT;
    DECLARE DEST_AIRPORT_ID INT;
    DECLARE FROM_TS TIMESTAMP;
    DECLARE TO_TS TIMESTAMP;
    DECLARE SOURCE_OFFSET TIME;
    DECLARE DEST_OFFSET TIME;

    SET FROM_DATE = DATE_ADD(FROM_DATE, INTERVAL - LEAST(DATEDIFF(FROM_DATE, UTC_DATE()), 2) DAY);
    SET FROM_TS = TIMESTAMP(FROM_DATE, ADDTIME(UTC_TIME(), '02:00:00'));
    SET TO_TS = TIMESTAMP(DATE_ADD(FROM_DATE, INTERVAL 7 DAY), ADDTIME(UTC_TIME(), '02:00:00'));

    SELECT AIRPORT_ID, OFFSET
    INTO SOURCE_AIRPORT_ID, SOURCE_OFFSET
    FROM AIRPORT
    WHERE CITY = SOURCE_CITY
    AND COUNTRY = SOURCE_COUNTRY;

    SELECT AIRPORT_ID, OFFSET
    INTO DEST_AIRPORT_ID, DEST_OFFSET
    FROM AIRPORT
    WHERE CITY = DEST_CITY
    AND COUNTRY = DEST_COUNTRY;

    SELECT P.FLIGHT_ID,
        TIMESTAMP(D.DEPARTURE_DATE, ADDTIME(P.DEPARTURE_TIME, SOURCE_OFFSET)) AS DEP_TS,
        D.DELAYED_BY,
        P.DURATION,
        TIMESTAMP(D.DEPARTURE_DATE, ADDTIME(P.DEPARTURE_TIME, ADDTIME(P.DURATION, DEST_OFFSET))) AS ARR_TS,
        CALCULATE_TICKET_PRICE(CID, P.FLIGHT_ID, D.DEPARTURE_DATE, FALSE) AS TICKET_PRICE,
        D.FLIGHT_DATE_ID
    FROM FLIGHT_PATH P, FLIGHT_DATE D
    WHERE P.FLIGHT_ID = D.FLIGHT_ID
    AND P.SOURCE_ID = SOURCE_AIRPORT_ID
    AND P.DESTINATION_ID = DEST_AIRPORT_ID
    AND TIMESTAMP(D.DEPARTURE_DATE, P.DEPARTURE_TIME) > FROM_TS
    AND TIMESTAMP(D.DEPARTURE_DATE, P.DEPARTURE_TIME) < TO_TS
    AND D.FLIGHT_STATUS = 'AVAILABLE'
    ORDER BY D.DEPARTURE_DATE, P.DEPARTURE_TIME;
END $$

DROP FUNCTION IF EXISTS CONCATENATE_FLIGHT_DAYS $$
CREATE FUNCTION CONCATENATE_FLIGHT_DAYS (
    FID CHAR(5)
)
RETURNS CHAR(7) DETERMINISTIC
BEGIN
    DECLARE RESULT CHAR(7) DEFAULT '1234567';
    
    IF EXISTS (
        SELECT * FROM FLIGHT_DAY WHERE FLIGHT_ID = FID AND DAY_OF_WEEK = '1'
    ) THEN
        SET RESULT = REPLACE(RESULT, '1', '1');
    ELSE
        SET RESULT = REPLACE(RESULT, '1', '0');
    END IF;
    
    IF EXISTS (
        SELECT * FROM FLIGHT_DAY WHERE FLIGHT_ID = FID AND DAY_OF_WEEK = '2'
    ) THEN
        SET RESULT = REPLACE(RESULT, '2', '1');
    ELSE
        SET RESULT = REPLACE(RESULT, '2', '0');
    END IF;
    
    IF EXISTS (
        SELECT * FROM FLIGHT_DAY WHERE FLIGHT_ID = FID AND DAY_OF_WEEK = '3'
    ) THEN
        SET RESULT = REPLACE(RESULT, '3', '1');
    ELSE
        SET RESULT = REPLACE(RESULT, '3', '0');
    END IF;
    
    IF EXISTS (
        SELECT * FROM FLIGHT_DAY WHERE FLIGHT_ID = FID AND DAY_OF_WEEK = '4'
    ) THEN
        SET RESULT = REPLACE(RESULT, '4', '1');
    ELSE
        SET RESULT = REPLACE(RESULT, '4', '0');
    END IF;
    
    IF EXISTS (
        SELECT * FROM FLIGHT_DAY WHERE FLIGHT_ID = FID AND DAY_OF_WEEK = '5'
    ) THEN
        SET RESULT = REPLACE(RESULT, '5', '1');
    ELSE
        SET RESULT = REPLACE(RESULT, '5', '0');
    END IF;
    
    IF EXISTS (
        SELECT * FROM FLIGHT_DAY WHERE FLIGHT_ID = FID AND DAY_OF_WEEK = '6'
    ) THEN
        SET RESULT = REPLACE(RESULT, '6', '1');
    ELSE
        SET RESULT = REPLACE(RESULT, '6', '0');
    END IF;
    
    IF EXISTS (
        SELECT * FROM FLIGHT_DAY WHERE FLIGHT_ID = FID AND DAY_OF_WEEK = '7'
    ) THEN
        SET RESULT = REPLACE(RESULT, '7', '1');
    ELSE
        SET RESULT = REPLACE(RESULT, '7', '0');
    END IF;

    RETURN RESULT;
END $$

DROP PROCEDURE IF EXISTS SHOW_FLIGHT_PATH_FOR_ADMIN $$
CREATE PROCEDURE SHOW_FLIGHT_PATH_FOR_ADMIN ()
BEGIN
    DECLARE FID CHAR(5);
    DECLARE S_CITY VARCHAR(20);
    DECLARE S_CTY VARCHAR(20);
    DECLARE D_CITY VARCHAR(20);
    DECLARE D_CTY VARCHAR(20);
    DECLARE DID INT;

    SELECT P.FLIGHT_ID,
        CONCAT(A1.AIRPORT_NAME, ', ', A1.CITY, ', ', A1.COUNTRY) AS SOURCE_LOCATION,
        CONCAT(A2.AIRPORT_NAME, ', ', A2.CITY, ', ', A2.COUNTRY) AS DESTINATION_LOCATION,
        P.DEPARTURE_TIME,
        P.DURATION,
        P.NUM_ROWS*P.NUM_COLS AS CAPACITY,
        P.BASE_FARE,
        CONCATENATE_FLIGHT_DAYS(FLIGHT_ID) AS DAYS_STRING,
        P.LEASE_EXPIRY
    FROM FLIGHT_PATH P, AIRPORT A1, AIRPORT A2
    WHERE P.SOURCE_ID = A1.AIRPORT_ID
    AND P.DESTINATION_ID = A2.AIRPORT_ID
    ORDER BY SOURCE_LOCATION, DESTINATION_LOCATION, FLIGHT_ID;
END $$

DROP PROCEDURE IF EXISTS ADD_FLIGHT_PATH_FOR_ADMIN $$
CREATE PROCEDURE ADD_FLIGHT_PATH_FOR_ADMIN (
    FID CHAR(5),
    SOURCE_CITY VARCHAR(20),
    SOURCE_COUNTRY VARCHAR(20),
    DEST_CITY VARCHAR(20),
    DEST_COUNTRY VARCHAR(20),
    DEP_TIME TIME,
    DRTN TIME,
    NR INT,
    NC INT,
    FARE INT,
    LEASE DATE,
    WEEKS_AVAILABLE CHAR(7)
)
BEGIN
    DECLARE S_ID INT;
    DECLARE D_ID INT;
    DECLARE V_COUNTER INT UNSIGNED DEFAULT 1;
    DECLARE V_MAX INT UNSIGNED DEFAULT 8;
    DECLARE DEP_DATE DATE DEFAULT UTC_DATE();

    SELECT AIRPORT_ID
    INTO S_ID
    FROM AIRPORT
    WHERE CITY = SOURCE_CITY
    AND COUNTRY = SOURCE_COUNTRY;

    SELECT AIRPORT_ID
    INTO D_ID
    FROM AIRPORT
    WHERE CITY = DEST_CITY
    AND COUNTRY = DEST_COUNTRY;

    IF DEP_TIME < '00:00:00' OR DEP_TIME >= '24:00:00' THEN
        SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = 'INCORRECT DEPARTURE_TIME';
    ELSEIF S_ID = D_ID THEN
        SIGNAL SQLSTATE '45002' SET MESSAGE_TEXT = 'SOURCE LOCATION AND DESTINATION LOCATION CAN NOT BE THE SAME';
    ELSEIF LEASE <= UTC_DATE() THEN
        SIGNAL SQLSTATE '45003' SET MESSAGE_TEXT = 'LEASE_EXPIARY MUST BE IN THE FUTURE DATE';
    ELSEIF DRTN <= '01:00:00' THEN
        SIGNAL SQLSTATE '45004' SET MESSAGE_TEXT = 'DURATION IS VERY LESS';
    ELSEIF NR < 5 OR NR > 20 OR NC < 6 OR NC > 9 OR NC = 7 THEN
        SIGNAL SQLSTATE '45005' SET MESSAGE_TEXT = 'NUMBER OF ROWS OR COLUMNS IS INVALID (ROWS IN RANGE(5,20) AND COLUMNS IN (6,8,9))';
    ELSEIF FARE < 5000 OR FARE > 200000 THEN
        SIGNAL SQLSTATE '45006' SET MESSAGE_TEXT = 'FARE AMOUNT IS NOT IN VALID RANGE(5000,200000)';
    ELSEIF WEEKS_AVAILABLE = '0000000' THEN
        SIGNAL SQLSTATE '45007' SET MESSAGE_TEXT = 'THE FLIGHT MUST BE AVAILABLE FOR ATLEAST ONE DAY IN A WEEK';
    END IF;

    INSERT INTO FLIGHT_PATH
    VALUES (FID, S_ID, D_ID, DEP_TIME, DRTN, NR, NC, FARE, LEASE);

    IF ROW_COUNT() = 1 THEN
        WHILE V_COUNTER < V_MAX DO
            IF RIGHT(LEFT(WEEKS_AVAILABLE, V_COUNTER), 1) = '1' THEN
                INSERT INTO FLIGHT_DAY
                VALUES (FID, V_COUNTER);
            END IF;
            SET V_COUNTER = V_COUNTER + 1;
        END WHILE;

        SET V_COUNTER = 0;
        SET V_MAX = 56;

        WHILE V_COUNTER < V_MAX DO
            SET DEP_DATE = DATE_ADD(DEP_DATE, INTERVAL 1 DAY);
            IF EXISTS (SELECT * FROM FLIGHT_DAY WHERE FLIGHT_ID = FID AND DAY_OF_WEEK = DAYOFWEEK(DEP_DATE)) THEN
                INSERT INTO FLIGHT_DATE (FLIGHT_ID, DEPARTURE_DATE, DELAYED_BY, FLIGHT_STATUS)
                VALUES (FID, DEP_DATE, '00:00:00', 'AVAILABLE');
            END IF;
            SET V_COUNTER = V_COUNTER + 1;
        END WHILE;
    END IF;
END $$

DROP TRIGGER IF EXISTS BOOK_TICKET $$
CREATE TRIGGER BOOK_TICKET
BEFORE INSERT ON TICKET
FOR EACH ROW
BEGIN
    DECLARE FSTATUS ENUM ('AVAILABLE', 'CANCELLED');
    DECLARE NR INT;
    DECLARE NC INT;

    SELECT FLIGHT_STATUS
    INTO FSTATUS
    FROM FLIGHT_DATE
    WHERE FLIGHT_DATE.FLIGHT_DATE_ID = NEW.FLIGHT_DATE_ID;

    SELECT NUM_ROWS, NUM_COLS
    INTO NR, NC
    FROM FLIGHT_PATH, FLIGHT_DATE
    WHERE FLIGHT_DATE.FLIGHT_DATE_ID = NEW.FLIGHT_DATE_ID
    AND FLIGHT_PATH.FLIGHT_ID = FLIGHT_DATE.FLIGHT_ID;

    IF FSTATUS IS NULL THEN
        SIGNAL SQLSTATE '46000' SET MESSAGE_TEXT = 'NO SUCH FLIGHT EXISTS';
    ELSEIF FSTATUS = 'CANCELLED' THEN
        SIGNAL SQLSTATE '46001' SET MESSAGE_TEXT = 'THIS FLIGHT WAS CANCELLED';
    ELSEIF NOT EXISTS (SELECT CUSTOMER_ID FROM CUSTOMERS WHERE CUSTOMERS.CUSTOMER_ID = NEW.CUSTOMER_ID) THEN
        SIGNAL SQLSTATE '46002' SET MESSAGE_TEXT = 'THIS CUSTOMER DOES NOT EXIST';
    ELSEIF NEW.PASSENGER_AGE < 1 OR NEW.PASSENGER_AGE > 100 THEN
        SIGNAL SQLSTATE '46003' SET MESSAGE_TEXT = 'INVALID AGE OF PASSENGER';
    ELSEIF NR IS NULL OR NEW.ROW_NUM > NR OR NEW.ROW_NUM < 1 OR NC IS NULL OR NEW.COL_NUM > NC OR NEW.COL_NUM < 1 THEN
        SIGNAL SQLSTATE '46004' SET MESSAGE_TEXT = 'INVALID SEAT NUMBER';
    END IF;
END $$

DROP PROCEDURE IF EXISTS SHOW_TICKETS_BY_CUSTOMER_ID $$
CREATE PROCEDURE SHOW_TICKETS_BY_CUSTOMER_ID (
    CID VARCHAR(20),
    IS_UPCOMING INT
)
BEGIN
    IF CID IS NULL THEN
        SIGNAL SQLSTATE '47001' SET MESSAGE_TEXT = 'PLEASE PROVIDE CUSTOMER ID';
    ELSEIF IS_UPCOMING = 1 THEN
        SELECT T.STATUS,
            T.TICKET_ID, 
            P.FLIGHT_ID, 
            A1.AIRPORT_ID AS SRC_AIRPORT_ID, 
            A1.AIRPORT_NAME AS SRC_AIRPORT_NAME, 
            A1.CITY AS SRC_CIY, 
            A1.COUNTRY AS SRC_COUNTRY, 
            A2.AIRPORT_ID AS DEST_AIRPORT_ID, 
            A2.AIRPORT_NAME AS DEST_AIRPORT_NAME, 
            A2.CITY AS DEST_CIY, 
            A2.COUNTRY AS DEST_COUNTRY, 
            TIMESTAMP(D.DEPARTURE_DATE, ADDTIME(P.DEPARTURE_TIME, A1.OFFSET)) AS DEP_TS,
            P.DURATION,
            TIMESTAMP(D.DEPARTURE_DATE, ADDTIME(P.DEPARTURE_TIME, ADDTIME(P.DURATION, A2.OFFSET))) AS ARR_TS,
            T.PASSENGER_NAME, T.PASSENGER_AGE, 
            T.TIME_OF_BOOKING, T.TIME_OF_CANCELLATION, 
            T.FARE, 
            CONCAT(CONVERT(T.ROW_NUM, CHAR), SUBSTRING('ABCDEFGHIJKLMNOPQRSTUVWXYZ', T.COL_NUM, 1)) AS SEAT_NUM
        FROM TICKET T, FLIGHT_DATE D, FLIGHT_PATH P, AIRPORT A1, AIRPORT A2
        WHERE T.CUSTOMER_ID = CID
        AND T.FLIGHT_DATE_ID = D.FLIGHT_DATE_ID
        AND D.FLIGHT_ID = P.FLIGHT_ID
        AND TIMESTAMP(D.DEPARTURE_DATE, P.DEPARTURE_TIME) > UTC_TIMESTAMP()
        AND P.SOURCE_ID = A1.AIRPORT_ID
        AND P.DESTINATION_ID = A2.AIRPORT_ID;
    ELSEIF IS_UPCOMING = 0 THEN
        SELECT T.STATUS,
            T.TICKET_ID, 
            P.FLIGHT_ID, 
            A1.AIRPORT_ID AS SRC_AIRPORT_ID, 
            A1.AIRPORT_NAME AS SRC_AIRPORT_NAME, 
            A1.CITY AS SRC_CIY, 
            A1.COUNTRY AS SRC_COUNTRY, 
            A2.AIRPORT_ID AS DEST_AIRPORT_ID, 
            A2.AIRPORT_NAME AS DEST_AIRPORT_NAME, 
            A2.CITY AS DEST_CIY, 
            A2.COUNTRY AS DEST_COUNTRY, 
            TIMESTAMP(D.DEPARTURE_DATE, ADDTIME(P.DEPARTURE_TIME, A1.OFFSET)) AS DEP_TS,
            TIMESTAMP(D.DEPARTURE_DATE, ADDTIME(P.DEPARTURE_TIME, ADDTIME(P.DURATION, A2.OFFSET))) AS ARR_TS,
            T.PASSENGER_NAME, T.PASSENGER_AGE, 
            T.TIME_OF_BOOKING, T.TIME_OF_CANCELLATION, 
            T.FARE, 
            CONCAT(CONVERT(T.ROW_NUM, CHAR), SUBSTRING('ABCDEFGHIJKLMNOPQRSTUVWXYZ', T.COL_NUM, 1)) AS SEAT_NUM
        FROM TICKET T, FLIGHT_DATE D, FLIGHT_PATH P, AIRPORT A1, AIRPORT A2
        WHERE T.CUSTOMER_ID = CID
        AND T.FLIGHT_DATE_ID = D.FLIGHT_DATE_ID
        AND D.FLIGHT_ID = P.FLIGHT_ID
        AND TIMESTAMP(D.DEPARTURE_DATE, P.DEPARTURE_TIME) < UTC_TIMESTAMP()
        AND P.SOURCE_ID = A1.AIRPORT_ID
        AND P.DESTINATION_ID = A2.AIRPORT_ID;
    ELSE
        SIGNAL SQLSTATE '47002' SET MESSAGE_TEXT = 'INVALID PROCEDURE PARAMETER (IS_COMING)';
    END IF;
END $$

DROP PROCEDURE IF EXISTS SHOW_TICKETS_BY_TICKET_ID $$
CREATE PROCEDURE SHOW_TICKETS_BY_TICKET_ID (
    TID INT
)
BEGIN
    SELECT T.STATUS,
        T.TICKET_ID, 
        P.FLIGHT_ID, 
        A1.AIRPORT_ID AS SRC_AIRPORT_ID, 
        A1.AIRPORT_NAME AS SRC_AIRPORT_NAME, 
        A1.CITY AS SRC_CIY, 
        A1.COUNTRY AS SRC_COUNTRY, 
        A2.AIRPORT_ID AS DEST_AIRPORT_ID, 
        A2.AIRPORT_NAME AS DEST_AIRPORT_NAME, 
        A2.CITY AS DEST_CIY, 
        A2.COUNTRY AS DEST_COUNTRY, 
        TIMESTAMP(D.DEPARTURE_DATE, ADDTIME(P.DEPARTURE_TIME, A1.OFFSET)) AS DEP_TS,
        TIMESTAMP(D.DEPARTURE_DATE, ADDTIME(P.DEPARTURE_TIME, ADDTIME(P.DURATION, A2.OFFSET))) AS ARR_TS,
        T.PASSENGER_NAME, T.PASSENGER_AGE, 
        T.TIME_OF_BOOKING, T.TIME_OF_CANCELLATION, 
        T.FARE, 
        CONCAT(CONVERT(T.ROW_NUM, CHAR), SUBSTRING('ABCDEFGHIJKLMNOPQRSTUVWXYZ', T.COL_NUM, 1)) AS SEAT_NUM
    FROM TICKET T, FLIGHT_DATE D, FLIGHT_PATH P, AIRPORT A1, AIRPORT A2
    WHERE T.TICKET_ID = TID
    AND D.FLIGHT_DATE_ID = T.FLIGHT_DATE_ID
    AND P.FLIGHT_ID = D.FLIGHT_ID
    AND A1.AIRPORT_ID = P.SOURCE_ID
    AND A2.AIRPORT_ID = P.DESTINATION_ID;
END $$

DROP PROCEDURE IF EXISTS CANCEL_FLIGHT_DATE $$
CREATE PROCEDURE CANCEL_FLIGHT_DATE (
    FID CHAR(5),
    DEP_DATE DATE
)
BEGIN
    DECLARE FDID INT;
    DECLARE OFST TIME;
    DECLARE CURR_STATUS ENUM ('AVAILABLE', 'CANCELLED');
    
    SELECT FLIGHT_DATE_ID, FLIGHT_STATUS
    INTO FDID, CURR_STATUS
    FROM FLIGHT_DATE
    WHERE FLIGHT_ID = FID
    AND DEPARTURE_DATE = DEP_DATE;

    IF FDID IS NULL THEN
        SIGNAL SQLSTATE '48001' SET MESSAGE_TEXT = 'THIS FLIGHT IS NOT SCHEDULED ON THIS DATE';
    ELSEIF CURR_STATUS = 'CANCELLED' THEN
        SIGNAL SQLSTATE '48002' SET MESSAGE_TEXT = 'THIS FLIGHT WAS ALREADY CANCELLED';
    END IF;

    SELECT OFFSET
    INTO OFST
    FROM FLIGHT_PATH, AIRPORT
    WHERE FLIGHT_ID = FID
    AND AIRPORT_ID = SOURCE_ID;

    UPDATE FLIGHT_DATE
    SET FLIGHT_STATUS = 'CANCELLED'
    WHERE FLIGHT_DATE_ID = FDID;

    UPDATE TICKET
    SET STATUS = 'CANCELLED', TIME_OF_CANCELLATION = ADDTIME(UTC_TIMESTAMP(), OFST)
    WHERE FLIGHT_DATE_ID = FDID;

    SELECT TICKET_ID, TICKET.CUSTOMER_ID, EMAIL_ID
    FROM TICKET, CUSTOMERS
    WHERE TICKET.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID
    AND FLIGHT_DATE_ID = FDID;
END $$

DROP PROCEDURE IF EXISTS DELAY_FLIGHT_DATE $$
CREATE PROCEDURE DELAY_FLIGHT_DATE (
    FID CHAR(5),
    DEP_DATE DATE,
    ADD_DELAY TIME
)
BEGIN
    DECLARE FDID INT;
    DECLARE CURR_STATUS ENUM ('AVAILABLE', 'CANCELLED');

    SELECT FLIGHT_DATE_ID, FLIGHT_STATUS
    INTO FDID, CURR_STATUS
    FROM FLIGHT_DATE
    WHERE FLIGHT_ID = FID
    AND DEPARTURE_DATE = DEP_DATE;

    IF FDID IS NULL THEN
        SIGNAL SQLSTATE '49001' SET MESSAGE_TEXT = 'THIS FLIGHT IS NOT SCHEDULED ON THIS DATE';
    ELSEIF CURR_STATUS = 'CANCELLED' THEN
        SIGNAL SQLSTATE '49002' SET MESSAGE_TEXT = 'THIS FLIGHT WAS ALREADY CANCELLED';
    END IF;

    UPDATE FLIGHT_DATE
    SET DELAYED_BY = ADDTIME(DELAYED_BY, ADD_DELAY)
    WHERE FLIGHT_DATE_ID = FDID;

    SELECT TICKET_ID, TICKET.CUSTOMER_ID, EMAIL_ID
    FROM TICKET, CUSTOMERS
    WHERE TICKET.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID
    AND FLIGHT_DATE_ID = FDID;
END $$

DELIMITER ;
DELIMITER $$
`;
