export const STORED_OBJECTS = `
DELIMITER $$

DROP PROCEDURE IF EXISTS ADD_FLIGHT_DATE $$
CREATE PROCEDURE ADD_FLIGHT_DATE ()
BEGIN
    DECLARE FID CHAR(5);
    DECLARE DEPDATE DATE;
    DECLARE DONE INT;
    DECLARE CUR1 CURSOR FOR
        SELECT FLIGHT_ID
        FROM FLIGHT_DAY
        WHERE DAY_OF_WEEK = DAYOFWEEK(CURDATE());
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE = 1;
    SET DONE = 0;
    SET DEPDATE = DATE_ADD(CURDATE(), INTERVAL 56 DAY);
    OPEN CUR1;
    ITR: LOOP
        FETCH CUR1 INTO FID;
        IF DONE = 1 THEN
            LEAVE ITR;
        END IF;
        INSERT INTO FLIGHT_DATE VALUES (FID, DEPDATE, '00:00:00', 'AVAILABLE');
    END LOOP ITR;
    CLOSE CUR1;
END $$

DROP FUNCTION IF EXISTS CHANGE_LEASE_DATE_FLIGHT_PATH $$
CREATE FUNCTION CHANGE_LEASE_DATE_FLIGHT_PATH (
    FID CHAR(5),
    NEW_LEASE_EXPIRY DATE
)
RETURNS BOOLEAN DETERMINISTIC
BEGIN
    DECLARE DONE INT;
    DECLARE DEP_DATE DATE;
    DECLARE IS_SUCCESS BOOLEAN;

    IF NOT EXISTS (
        SELECT *
        FROM TICKET
        WHERE DATE_OF_DEPARTURE >= NEW_LEASE_EXPIRY
        AND FLIGHT_ID = FID
    ) THEN
        UPDATE FLIGHT_PATH
        SET LEASE_EXPIRY = NEW_LEASE_EXPIRY
        WHERE FLIGHT_ID = FID;

        DELETE FROM FLIGHT_DATE
        WHERE DEPARTURE_DATE >= NEW_LEASE_EXPIRY
        AND FLIGHT_ID = FID;

        SET IS_SUCCESS = TRUE;

    ELSE
        SET IS_SUCCESS = FALSE;
    END IF;
    
    RETURN IS_SUCCESS;
END $$

DROP FUNCTION IF EXISTS CALCULATE_TICKET_PRICE $$
CREATE FUNCTION CALCULATE_TICKET_PRICE (
    CID VARCHAR(20),
    FID CHAR(5),
    DEP_DATE DATE,
    IS_WINDOW BOOLEAN
)
RETURNS INT DETERMINISTIC
BEGIN
    DECLARE PRFSN ENUM ('STUDENT', 'ARMYPERSONNEL', 'SENIORCITIZEN', 'OTHER');
    DECLARE TICKET_COST INT;
    DECLARE DATE_DIFF INT;
    DECLARE PERMISSION CHAR;

    SELECT PROFESSION, ROLE
    INTO PRFSN, PERMISSION
    FROM CUSTOMERS
    WHERE CUSTOMER_ID = CID;

    SELECT BASE_FARE
    INTO TICKET_COST
    FROM FLIGHT_PATH
    WHERE FLIGHT_ID = FID;

    IF PERMISSION != 'N' THEN
        SET TICKET_COST = NULL;
    END IF;

    IF PRFSN = 'STUDENT' THEN
        SET TICKET_COST = 0.9 * TICKET_COST;
    ELSEIF PRFSN = 'ARMYPERSONNEL' THEN
        SET TICKET_COST = 0.75 * TICKET_COST;
    ELSEIF PRFSN = 'SENIORCITIZEN' THEN
        SET TICKET_COST = 0.95 * TICKET_COST;
    ELSEIF PRFSN IS NULL THEN
        SET TICKET_COST = NULL;
    END IF;

    IF IS_WINDOW = TRUE THEN
        SET TICKET_COST = TICKET_COST + 150;
    ELSEIF IS_WINDOW IS NULL THEN
        SET TICKET_COST = NULL;
    END IF;

    SET DATE_DIFF = DATEDIFF(DEP_DATE, CURDATE());
    IF DATE_DIFF < 0 THEN
        SET TICKET_COST = NULL;
    ELSEIF DATE_DIFF < 7 THEN
        SET TICKET_COST = TICKET_COST + TICKET_COST/10*(7-DATE_DIFF) + 2500;
    ELSEIF DATE_DIFF < 28 THEN
        SET TICKET_COST = TICKET_COST + 2500;
    ELSEIF DATE_DIFF > 56 THEN
        SET TICKET_COST = NULL;
    END IF;

    RETURN TICKET_COST;
END $$

DROP PROCEDURE IF EXISTS DELETE_FLIGHTS $$
CREATE PROCEDURE DELETE_FLIGHTS ()
BEGIN
    DELETE FROM FLIGHT_PATH
    WHERE LEASE_EXPIRY < CURDATE();

    DELETE FROM FLIGHT_DATE
    WHERE DATE_OF_DEPARTURE < CURDATE();
END $$

DROP PROCEDURE IF EXISTS SHOW_FLIGHTS $$
CREATE PROCEDURE SHOW_FLIGHTS (
    IN CID VARCHAR(20),
    IN SOURCE_CITY VARCHAR(20),
    IN SOURCE_COUNTRY VARCHAR(20),
    IN DEST_CITY VARCHAR(20),
    IN DEST_COUNTRY VARCHAR(20),
    IN FROM_DATE DATE
)
BEGIN
    DECLARE SOURCE_AIRPORT_ID INT;
    DECLARE DEST_AIRPORT_ID INT;
    DECLARE V_COUNTER INT UNSIGNED DEFAULT 0;
    DECLARE V_MAX INT UNSIGNED DEFAULT 7;
    DECLARE TO_DATE DATE;

    SET FROM_DATE = DATE_ADD(FROM_DATE, INTERVAL - LEAST(DATEDIFF(FROM_DATE, CURDATE()), 2) DAY);
    SET TO_DATE = DATE_ADD(FROM_DATE, INTERVAL 7 DAY);

    SELECT AIRPORT_ID
    INTO SOURCE_AIRPORT_ID
    FROM AIRPORT
    WHERE CITY = SOURCE_CITY
    AND COUNTRY = SOURCE_COUNTRY;

    SELECT AIRPORT_ID
    INTO DEST_AIRPORT_ID
    FROM AIRPORT
    WHERE CITY = DEST_CITY
    AND COUNTRY = DEST_COUNTRY;

    SELECT P.FLIGHT_ID,
        D.DEPARTURE_DATE,
        P.DEPARTURE_TIME + D.DELAYED_BY AS DEP_TIME,
        P.DURATION,
        CALCULATE_TICKET_PRICE(CID, P.FLIGHT_ID, D.DEPARTURE_DATE, FALSE) AS TICKET_PRICE
    FROM FLIGHT_PATH P, FLIGHT_DATE D
    WHERE P.FLIGHT_ID = D.FLIGHT_ID
    AND P.SOURCE_ID = SOURCE_AIRPORT_ID
    AND P.DESTINATION_ID = DEST_AIRPORT_ID
    AND (
        D.DEPARTURE_DATE > FROM_DATE
        OR (
            D.DEPARTURE_DATE = FROM_DATE
            AND P.DEPARTURE_TIME > CURRENT_TIME()
        )
    )
    AND (
        D.DEPARTURE_DATE < TO_DATE
        OR (
            D.DEPARTURE_DATE = TO_DATE
            AND P.DEPARTURE_TIME < CURRENT_TIME()
        )
    )
    AND D.FLIGHT_STATUS = 'AVAILABLE'
    ORDER BY D.DEPARTURE_DATE, P.DEPARTURE_TIME;
END $$

DROP FUNCTION IF EXISTS CONCATENATE_FLIGHT_DAYS $$
CREATE FUNCTION CONCATENATE_FLIGHT_DAYS (
    FID CHAR(5)
)
RETURNS CHAR(7) DETERMINISTIC
BEGIN
    DECLARE RESULT CHAR(7) DEFAULT '1234567';
    
    IF EXISTS (
        SELECT * FROM FLIGHT_DAY WHERE FLIGHT_ID = FID AND DAY_OF_WEEK = '1'
    ) THEN
        SET RESULT = REPLACE(RESULT, '1', '1');
    ELSE
        SET RESULT = REPLACE(RESULT, '1', '0');
    END IF;
    
    IF EXISTS (
        SELECT * FROM FLIGHT_DAY WHERE FLIGHT_ID = FID AND DAY_OF_WEEK = '2'
    ) THEN
        SET RESULT = REPLACE(RESULT, '2', '1');
    ELSE
        SET RESULT = REPLACE(RESULT, '2', '0');
    END IF;
    
    IF EXISTS (
        SELECT * FROM FLIGHT_DAY WHERE FLIGHT_ID = FID AND DAY_OF_WEEK = '3'
    ) THEN
        SET RESULT = REPLACE(RESULT, '3', '1');
    ELSE
        SET RESULT = REPLACE(RESULT, '3', '0');
    END IF;
    
    IF EXISTS (
        SELECT * FROM FLIGHT_DAY WHERE FLIGHT_ID = FID AND DAY_OF_WEEK = '4'
    ) THEN
        SET RESULT = REPLACE(RESULT, '4', '1');
    ELSE
        SET RESULT = REPLACE(RESULT, '4', '0');
    END IF;
    
    IF EXISTS (
        SELECT * FROM FLIGHT_DAY WHERE FLIGHT_ID = FID AND DAY_OF_WEEK = '5'
    ) THEN
        SET RESULT = REPLACE(RESULT, '5', '1');
    ELSE
        SET RESULT = REPLACE(RESULT, '5', '0');
    END IF;
    
    IF EXISTS (
        SELECT * FROM FLIGHT_DAY WHERE FLIGHT_ID = FID AND DAY_OF_WEEK = '6'
    ) THEN
        SET RESULT = REPLACE(RESULT, '6', '1');
    ELSE
        SET RESULT = REPLACE(RESULT, '6', '0');
    END IF;
    
    IF EXISTS (
        SELECT * FROM FLIGHT_DAY WHERE FLIGHT_ID = FID AND DAY_OF_WEEK = '7'
    ) THEN
        SET RESULT = REPLACE(RESULT, '7', '1');
    ELSE
        SET RESULT = REPLACE(RESULT, '7', '0');
    END IF;

    RETURN RESULT;
END $$

DROP PROCEDURE IF EXISTS SHOW_FLIGHT_PATH_FOR_ADMIN $$
CREATE PROCEDURE SHOW_FLIGHT_PATH_FOR_ADMIN ()
BEGIN
    DECLARE FID CHAR(5);
    DECLARE S_CITY VARCHAR(20);
    DECLARE S_CTY VARCHAR(20);
    DECLARE D_CITY VARCHAR(20);
    DECLARE D_CTY VARCHAR(20);
    DECLARE DID INT;

    SELECT P.FLIGHT_ID,
        CONCAT(A1.AIRPORT_NAME, ', ', A1.CITY, ', ', A1.COUNTRY) AS SOURCE_LOCATION,
        CONCAT(A2.AIRPORT_NAME, ', ', A2.CITY, ', ', A2.COUNTRY) AS DESTINATION_LOCATION,
        P.DEPARTURE_TIME,
        P.DURATION,
        P.NUM_ROWS*P.NUM_COLS AS CAPACITY,
        P.BASE_FARE,
        CONCATENATE_FLIGHT_DAYS(FLIGHT_ID) AS DAYS_STRING,
        P.LEASE_EXPIRY
    FROM FLIGHT_PATH P, AIRPORT A1, AIRPORT A2
    WHERE P.SOURCE_ID = A1.AIRPORT_ID
    AND P.DESTINATION_ID = A2.AIRPORT_ID
    ORDER BY SOURCE_LOCATION, DESTINATION_LOCATION, FLIGHT_ID;
END $$

DROP TRIGGER IF EXISTS BOOK_TICKET $$
CREATE TRIGGER BOOK_TICKET
BEFORE INSERT ON TICKET
FOR EACH ROW
BEGIN
    DECLARE FSTATUS ENUM ('AVAILABLE', 'CANCELLED');
    SELECT FLIGHT_STATUS
    INTO FSTATUS
    FROM FLIGHT_DATE
    WHERE FLIGHT_ID = NEW.FLIGHT_ID
    AND DEPARTURE_DATE = NEW.DATE_OF_DEPARTURE;

    IF (FSTATUS = 'CANCELLED') THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'NO SUCH FLIGHT EXISTS';
    END IF;
END $$

DROP PROCEDURE IF EXISTS CANCEL_FLIGHT_DATE $$
CREATE PROCEDURE CANCEL_FLIGHT_DATE (
    FID CHAR(5),
    DEP_DATE DATE
)
BEGIN
    UPDATE FLIGHT_DATE
    SET FLIGHT_STATUS = 'CANCELLED'
    WHERE FLIGHT_ID = FID
    AND DEPARTURE_DATE = DEP_DATE;

    UPDATE TICKET
    SET STATUS = 'CANCELLED', TIME_OF_CANCELLATION = CURDATE()
    WHERE FLIGHT_ID = FID
    AND DATE_OF_DEPARTURE = DEP_DATE;

    SELECT TICKET_ID, TICKET.CUSTOMER_ID, EMAIL
    FROM TICKET, CUSTOMERS
    WHERE TICKET.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID
    AND FLIGHT_ID = FID
    AND DATE_OF_DEPARTURE = DEP_DATE;
END $$

DROP PROCEDURE IF EXISTS DELAY_FLIGHT_DATE $$
CREATE PROCEDURE DELAY_FLIGHT_DATE (
    FID CHAR(5),
    DEP_DATE DATE,
    ADD_DELAY TIME
)
BEGIN
    UPDATE FLIGHT_DATE
    SET DELAYED_BY = DELAYED_BY + ADD_DELAY
    WHERE FLIGHT_ID = FID
    AND DEPARTURE_DATE = DEP_DATE;

    SELECT TICKET_ID, TICKET.CUSTOMER_ID, EMAIL
    FROM TICKET, CUSTOMERS
    WHERE TICKET.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID
    AND FLIGHT_ID = FID
    AND DATE_OF_DEPARTURE = DEP_DATE;
END $$

DELIMITER ;
DELIMITER $$
`